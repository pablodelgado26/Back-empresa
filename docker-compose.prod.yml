version: '3.8'

services:
  # Banco de dados PostgreSQL para produção
  postgres:
    image: postgres:15-alpine
    container_name: empresa_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: empresa_db
      POSTGRES_USER: empresa_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups  # Para backups do banco
    networks:
      - empresa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U empresa_user -d empresa_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Não expor a porta publicamente em produção
    # ports:
    #   - "5432:5432"

  # Aplicação Node.js para produção
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: empresa_app_prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://empresa_user:${POSTGRES_PASSWORD}@postgres:5432/empresa_db
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "4000:4000"
    networks:
      - empresa_network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - uploads_prod:/app/uploads
      - ./logs:/app/logs  # Para logs da aplicação
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx como reverse proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: empresa_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Para certificados SSL
    networks:
      - empresa_network
    depends_on:
      - app

networks:
  empresa_network:
    driver: bridge

volumes:
  postgres_prod_data:
    driver: local
  uploads_prod:
    driver: local
